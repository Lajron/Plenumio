@using Plenumio.Application.DTOs.Users.Responses
@model PageVM<ProfilePageModel>

@{
    var isVerified = true; // demo
    ViewData["Title"] = Model.Content.Profile.DisplayedName;
    var avatarUrl = string.IsNullOrEmpty(Model.Content.Profile.AvatarUrl) ? "https://i.imgur.com/u5xZmDF.png" : Model.Content.Profile.AvatarUrl;
    var backgroundUrl = string.IsNullOrEmpty(Model.Content.Profile.BackgroundUrl) ? "https://i.imgur.com/MCuopE1.jpeg" : Model.Content.Profile.BackgroundUrl;
    var description = string.IsNullOrEmpty(Model.Content.Profile.Description) ? "This user hasn't added a description yet." : Model.Content.Profile.Description;
    var websiteUrl = "milos.denic.dev";
}
<div class="col-8 d-flex flex-column">

    <div>
        <div class="rounded shadow-sm overflow-hidden">
            <div class="position-relative" style="background-image: url('@backgroundUrl'); background-size: cover; background-position: center; height: 180px;">
                <div class="position-absolute top-0 start-0 w-100 h-100 bg-dark bg-opacity-25"></div>
            </div>

            <div class="ps-3 pb-3">
                <div class="d-flex align-items-center">
                    <div class="me-3 z-1">
                        <img src="@avatarUrl"
                             class="rounded-circle border border-white border-5"
                             style="width:140px; height:140px; object-fit:cover; margin-top: -70px;"
                             alt="Avatar">
                    </div>

                    <div class="d-flex flex-column justify-content-center gap-1">
                        <div class="d-flex align-items-center gap-1">
                            <h4 class="mb-0">@Model.Content.Profile.DisplayedName</h4>
                        
                            <partial name="_UserRelationshipButtons" model="@Model.Content.Profile.UserRelationshipVM" />
                        </div>
                        <div class="d-flex align-items-center gap-2">
                            <medium class="text-muted">@@@Model.Content.Profile.Username</medium>
                            @if (isVerified) {
                                <i class="bi bi-patch-check-fill text-primary ms-1" title="Verified"></i>
                            }
                        </div>
                    </div>
                </div>

                <div class="mt-2">
                    <div class="d-flex gap-3">
                        <span><strong>@Model.Content.Profile.PostsCount</strong> posts</span>
                        <span><strong>@Model.Content.Profile.FollowersCount</strong> followers</span>
                        <span><strong>@Model.Content.Profile.FollowingCount</strong> following</span>
                    </div>

                    <p class="mt-2 mb-1">@description</p>

                    @if (!string.IsNullOrEmpty(websiteUrl) && websiteUrl != "#") {
                        <p class="mb-0"><a href="@websiteUrl" target="_blank" class="text-decoration-none">@websiteUrl</a></p>
                    }
                </div>
            </div>
        </div>
        <vc:posts filters="Model.Content.PostFilters" current-user-id="Model.CurrentUserId"></vc:posts>
    </div>


</div>


<div class="col-4 d-flex flex-column gap-2">

    <vc:trending-tags-card current-user-id="@Model.CurrentUserId"></vc:trending-tags-card>

    <vc:trending-users-card current-user-id="@Model.CurrentUserId"></vc:trending-users-card>

    <partial name="_RecentlyViewedPosts" />

    <partial name="_Footer" />

</div>
@section Scripts {
    <script>
        function postRelationshipAction(url, dataObj, container) {
            const token = container.find('input[name="__RequestVerificationToken"]').val();
            $.ajax({
                url: url,
                type: 'POST',
                data: Object.assign({ __RequestVerificationToken: token }, dataObj),
                success: function (html) {
                    // Replace the WHOLE wrapper so new token & buttons arrive intact
                    container.replaceWith(html);
                },
                error: function (xhr) {
                    if (xhr.status === 401) {
                        window.location.href = `/Login?returnurl=${encodeURIComponent(window.location.pathname)}`;
                    }
                }
            });
        }

        $(document).on('click', '.outgoing-btn', function () {
            const btn = $(this);
            const container = btn.closest('.user-relationship-container');
            let action;
            switch (btn.data('status')) {
                case 'Follow':   action = '/Profile/RequestFollow'; break;
                case 'Pending':  action = '/Profile/CancelFollowRequest'; break;
                case 'Unfollow': action = '/Profile/UnfollowUser'; break;
                case 'Declined': action = '/Profile/RequestFollow'; break;
                default: return;
            }
            postRelationshipAction(action, { userId: container.data('userid') }, container);
        });

        $(document).on('click', '.accept-btn', function () {
            const container = $(this).closest('.user-relationship-container');
            postRelationshipAction('/Profile/AcceptFollowRequest', {
                followerUserId: container.data('userid')
            }, container);
        });

        $(document).on('click', '.decline-btn', function () {
            const container = $(this).closest('.user-relationship-container');
            postRelationshipAction('/Profile/DeclineFollowRequest', {
                followerUserId: container.data('userid')
            }, container);
        });
    </script>
}